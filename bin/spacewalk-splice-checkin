#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright Â© 2012 Red Hat, Inc.
#
# This software is licensed to you under the GNU General Public
# License as published by the Free Software Foundation; either version
# 2 of the License (GPLv2) or (at your option) any later version.
# There is NO WARRANTY for this software, express or implied,
# including the implied warranties of MERCHANTABILITY,
# NON-INFRINGEMENT, or FITNESS FOR A PARTICULAR PURPOSE. You should
# have received a copy of GPLv2 along with this software; if not, see
# http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.

import fcntl
import logging
import logging.config
import os
import sys

from optparse import OptionParser
from spacewalk_splice_tool import checkin, utils, constants

CONFIG = utils.cfg_init(config_file=constants.SPLICE_CHECKIN_CONFIG)

def init_logging():
    log_config = CONFIG.get("logging", "config")
    if log_config:
        try:
            logging.config.fileConfig(log_config)
        except Exception, e:
            print e
            print "Unable to initialize logging config with: %s" % log_config


def obtain_lockfile(lockfile):
    try:
        fcntl.lockf(lockfile, fcntl.LOCK_EX | fcntl.LOCK_NB)
    except IOError:
        return False

    return True


def release_lockfile(lock_fd, lockfile):
    fcntl.lockf(lock_fd, fcntl.LOCK_UN)
    os.unlink(lockfile)


init_logging()
_LOG = logging.getLogger(__name__)

if __name__ == "__main__":
    parser = OptionParser(description="Spacewalk Splice Tool",
                          epilog="If no sync option is specified, both are run.")
    parser.add_option('--sample_json', action="store", default=None, metavar="DIR",
                      help="Specify a directory to write the json data sent "
                           "to Splice, if not specified no data is written "
                           "to file.")
    parser.add_option('--spacewalk-sync', action='store_true', default=None,
                      help="Only sync from spacewalk")
    parser.add_option('--splice-sync', action='store_true', default=None,
                      help="Only sync to splice")
    (opts, args) = parser.parse_args()

    if not opts.spacewalk_sync and not opts.splice_sync:
        opts.spacewalk_sync = True
        opts.splice_sync = True

    if opts.spacewalk_sync and opts.splice_sync:
        lockfile = '/tmp/.sst.lock'
    elif opts.spacewalk_sync:
        lockfile = '/tmp/.sst.spacewalk-sync.lock'
    elif opts.splice_sync:
        lockfile = '/tmp/.sst.splice-sync.lock'

    if opts.sample_json:
        if not os.access(opts.sample_json, os.F_OK):
            _LOG.error("Directory %s for sample json does not exist." %
                opts.sample_json)
            sys.exit(1)
        if not os.access(opts.sample_json, os.W_OK):
            _LOG.error("Directory %s for sample json is not writeable." %
                opts.sample_json)
            sys.exit(1)

    lock_fd = open(lockfile, 'w')
    if not obtain_lockfile(lock_fd):
        _LOG.error("unable to obtain lockfile at %s" % lockfile)
        sys.exit(1)

    try:
        checkin.main(opts)
    finally:
        release_lockfile(lock_fd, lockfile)
